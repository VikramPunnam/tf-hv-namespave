Sure — let’s structure this Jira ticket clearly and professionally. Here’s a well-organized draft:


---

Project: [CICD Team’s Jira Project]
Issue Type: Task (or Story — depending on your team’s process)
Summary: Setup CICD Pipeline for Sample Python Application with Container Image Build and OCP Deployment

Description:
We have a repository containing a sample Python application. The goal of this task is to understand the end-to-end CICD process — specifically focusing on:

Building a container image for the application.

Deploying the containerized application on the OpenShift Container Platform (OCP).


Scope of Work:

1. Container Image Build:

Set up the pipeline to build a container image from the Python application repo.

Ensure proper versioning and tagging of the image.

Push the image to the appropriate container registry.



2. Deployment to OCP:

Create and configure necessary OCP resources (like Deployment, Service, Route).

Deploy the containerized application on the OCP platform.

Validate that the application is running and accessible.



3. Documentation:

Document the steps involved in setting up this pipeline.

Outline any configurations, permissions, or tools required.




Acceptance Criteria:

A fully functioning CICD pipeline for container image build and OCP deployment.

Successfully deployed Python application accessible via OCP route.

Clear and comprehensive documentation provided.


Repo: [Link to the Repository]

Priority: Medium (or adjust based on your needs)

Labels: CICD Containerization OCP PythonApp

Assignee: [If there’s a specific person]


---

Let me know if you want me to tweak or add anything!



In Vault’s Kubernetes authentication method, the "token reviewer JWT" is a crucial component used to verify the identity of a service account in a Kubernetes cluster. Let’s break down what it does and why it’s needed.

What is the Token Reviewer JWT?
The JWT (JSON Web Token) in this context is a token associated with a Kubernetes service account. When a pod wants to authenticate to Vault, it uses this service account token. Vault then needs a way to verify that this token is valid and was issued by Kubernetes — this is where the "token reviewer JWT" comes in.

Purpose of the Token Reviewer JWT:
Vault uses the token reviewer JWT to call the Kubernetes TokenReview API. This API verifies whether the service account token presented by the pod is valid and associated with the expected service account in the Kubernetes cluster.

How it works:

1. A pod in the Kubernetes cluster makes a request to Vault using its service account JWT.


2. Vault takes that JWT and checks its authenticity by sending a request to Kubernetes’s TokenReview API.


3. Vault uses the Token Reviewer JWT to authenticate to the TokenReview API.


4. Kubernetes verifies the pod’s service account token and sends back a response confirming whether it is valid and which service account it’s linked to.


5. If everything checks out, Vault allows the pod to access the resources it’s authorized for.



**How the Token Reviewer JWT is configured



-----------

Here’s a more detailed and polished version of your Confluence page:


---

Kubernetes Authentication Method – Configuration and Testing

1. Overview

This document explains the Kubernetes Authentication Method for secure access control within a Kubernetes cluster. It walks through:

What Kubernetes authentication is and why it’s needed

Detailed steps to enable, configure, and test Kubernetes authentication

Creating necessary roles, policies, and service accounts

Troubleshooting and validation

Screenshots for clarity (to be added when performing steps)


Kubernetes authentication can be used with tools like HashiCorp Vault for identity verification. It allows Kubernetes to authenticate and securely access external services without sharing static credentials.


---

2. Prerequisites

Before you start, ensure the following:

Kubernetes Cluster: A working cluster with admin privileges

kubectl Configured: Access to manage your cluster

Vault Server (Optional): If you’re integrating with HashiCorp Vault

Service Account Permissions: Ability to create roles, bindings, and service accounts



---

3. Use Case and Benefits

The Kubernetes Authentication Method allows Kubernetes workloads (like pods) to authenticate and access resources securely without hardcoding credentials. It works by using:

Service Accounts: Kubernetes-native identities

JWT Tokens: Automatically mounted in the pod environment

RBAC Roles: Control what the service account can do


Benefits:

Increased Security: Avoids hardcoded secrets

Flexibility: Fine-grained access control with RBAC

Automation-Friendly: Works seamlessly with Kubernetes-native resources



---

4. Architecture

Here’s how the authentication process works:

1. A Kubernetes Pod uses a Service Account with attached RBAC permissions.


2. The Service Account Token (JWT) is automatically mounted inside the pod.


3. The pod uses the token to authenticate with the external system (like Vault).


4. Token Review API validates the identity of the pod via Kubernetes API.


5. Upon successful validation, the external system grants a short-lived token or permissions.




---

5. Step-by-Step Configuration

5.1 Enable Kubernetes Authentication

For external systems like Vault, enable the Kubernetes authentication method:

vault auth enable kubernetes

(Add Screenshot)


---

5.2 Get Kubernetes Cluster Information

You’ll need the Kubernetes cluster CA certificate, service account token, and API server address.

# Get the CA certificate
kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.ca\.crt}' | base64 --decode > ca.crt

# Get the service account token
TOKEN=$(kubectl get secret $(kubectl get serviceaccount default -o jsonpath='{.secrets[0].name}') -o jsonpath='{.data.token}' | base64 --decode)

# Get the Kubernetes API endpoint
K8S_HOST=$(kubectl config view --raw --minify --output 'jsonpath={.clusters[].cluster.server}')

(Add Screenshot)


---

5.3 Configure External System (Vault)

Use the gathered information to configure the Kubernetes auth method:

vault write auth/kubernetes/config \
    token_reviewer_jwt="$TOKEN" \
    kubernetes_host="$K8S_HOST" \
    kubernetes_ca_cert=@ca.crt

(Add Screenshot)


---

5.4 Create Service Account and Role

We’ll create a Service Account and bind it to a Cluster Role with TokenReview permissions.

Service Account YAML:

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth
  namespace: default

Role Binding YAML:

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault-auth
  namespace: default

Apply these configurations:

kubectl apply -f service-account.yaml
kubectl apply -f role-binding.yaml

(Add Screenshot)


---

5.5 Create a Vault Policy and Role

Vault Policy:

path "secret/data/*" {
  capabilities = ["read"]
}

Create the policy:

vault policy write read-secrets-policy read-secrets.hcl

Vault Role:

vault write auth/kubernetes/role/demo \
    bound_service_account_names=vault-auth \
    bound_service_account_namespaces=default \
    policies=read-secrets-policy \
    ttl=24h

(Add Screenshot)


---

5.6 Deploy a Test Pod

Let’s deploy a pod that uses the vault-auth service account:

apiVersion: v1
kind: Pod
metadata:
  name: vault-test
  namespace: default
spec:
  serviceAccountName: vault-auth
  containers:
  - name: busybox
    image: busybox
    command: ["sleep", "3600"]

Deploy the pod:

kubectl apply -f test-pod.yaml

(Add Screenshot)


---

5.7 Authenticate and Retrieve Secrets

Exec into the pod and authenticate:

kubectl exec -it vault-test -- /bin/sh

# Inside the pod
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
vault write auth/kubernetes/login role=demo jwt=$TOKEN

Verify access by retrieving secrets:

vault kv get secret/my-secret

(Add Screenshot)


---

6. Validation

Ensure the token was validated by the external system

Confirm access only to the expected paths based on policies

Verify service account permissions via Kubernetes RBAC



---

7. Troubleshooting


---

8. Conclusion

We successfully set up and tested Kubernetes authentication using service accounts and external systems like Vault. This method ensures secure and dynamic access without hardcoding sensitive credentials.

Let me know if you’d like me to add more details or polish this further!

