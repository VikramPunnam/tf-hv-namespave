The Vault CSI driver for OpenShift is used to securely inject secrets from HashiCorp Vault into OpenShift pods. It helps applications access secrets dynamically without hardcoding them or requiring external authentication logic. Here are some key use cases for deploying and using the Vault CSI driver in OpenShift:


---

1. Injecting Secrets into Pods as Volumes

The Vault CSI driver allows OpenShift applications to securely mount secrets from HashiCorp Vault as ephemeral volumes.

This is useful for applications that require credentials, API keys, certificates, or other sensitive data without embedding them in the container image or environment variables.


2. Dynamic Secret Rotation

Vault supports dynamic secrets, meaning credentials (e.g., database credentials, cloud IAM tokens) can be generated and rotated automatically.

The CSI driver ensures that applications always use up-to-date secrets without requiring restarts.


3. Database Credentials Management

Using Vault's database secrets engine, the CSI driver can generate short-lived database credentials for PostgreSQL, MySQL, MongoDB, etc.

This enhances security by preventing long-lived credentials and reducing attack surfaces.


4. TLS Certificates Injection

The CSI driver can be used to fetch and mount TLS certificates from Vaultâ€™s PKI secrets engine, ensuring secure communication between services.

This is particularly useful for mutual TLS (mTLS) configurations within OpenShift clusters.


5. Kubernetes Service Account Authentication

Applications in OpenShift can authenticate to Vault using Kubernetes Service Account Token Authentication, eliminating the need for static credentials.

This works by mapping OpenShift service accounts to Vault roles.


6. Automating Secret Delivery for CI/CD Pipelines

OpenShift-based CI/CD pipelines (e.g., using Tekton or ArgoCD) can mount secrets dynamically from Vault during build or deployment stages.

This ensures that secrets are provided at runtime without being stored in Git repositories.


7. Secure API Key Management

Applications needing access to external APIs (e.g., AWS, GCP, third-party services) can securely retrieve API keys from Vault via the CSI driver.

Vault can dynamically generate and revoke these API keys as needed.


8. Multi-Tenant Secret Isolation

OpenShift clusters often run multi-tenant workloads. The Vault CSI driver ensures secrets are scoped per namespace and per role, preventing unauthorized access.


9. Improving Compliance & Auditing

Vault provides audit logging for all secret accesses.

This helps organizations comply with security regulations (e.g., GDPR, HIPAA, PCI-DSS) by tracking who accessed which secrets and when.



---

Implementation Steps

1. Deploy HashiCorp Vault in OpenShift (or use an external Vault instance).


2. Configure Kubernetes Authentication in Vault.


3. Install the Vault CSI Driver in OpenShift via an Operator or Helm.


4. Create Kubernetes SecretsProviderClass to define how secrets should be fetched.


5. Mount Vault secrets in OpenShift Pods as ephemeral volumes.



Would you like a step-by-step guide on installation and configuration?



Step-by-Step Guide to Deploying the Vault CSI Driver in OpenShift

This guide covers setting up HashiCorp Vault, installing the Vault CSI driver, and securely injecting secrets into OpenShift pods.


---

Step 1: Deploy HashiCorp Vault in OpenShift

You can deploy Vault either inside OpenShift or use an external Vault instance. Below are the steps for an OpenShift deployment.

1.1 Deploy Vault using the HashiCorp Vault Operator

oc new-project vault
oc apply -f https://developer.hashicorp.com/vault/_downloads/operator/deployment.yaml

This installs the Vault operator, which helps manage Vault instances in OpenShift.

1.2 Deploy Vault as a StatefulSet

Create a Vault deployment:

cat <<EOF | oc apply -f -
apiVersion: vault.hashicorp.com/v1alpha1
kind: Vault
metadata:
  name: vault
  namespace: vault
spec:
  size: 1
  image: hashicorp/vault:latest
  volumeMounts:
    - name: data
      mountPath: /vault/data
EOF

1.3 Initialize Vault & Unseal

Once deployed, initialize Vault:

oc exec -it vault-0 -- vault operator init

Vault generates unseal keys. Use three of them to unseal Vault:

oc exec -it vault-0 -- vault operator unseal <unseal-key-1>
oc exec -it vault-0 -- vault operator unseal <unseal-key-2>
oc exec -it vault-0 -- vault operator unseal <unseal-key-3>

Login with the root token:

oc exec -it vault-0 -- vault login <root-token>


---

Step 2: Enable Kubernetes Authentication in Vault

Vault needs to authenticate OpenShift workloads.

2.1 Enable Kubernetes Authentication

vault auth enable kubernetes

2.2 Configure Kubernetes Authentication

Find the OpenShift API server URL:

oc whoami --show-server

Configure Vault with this URL:

vault write auth/kubernetes/config \
    kubernetes_host="https://kubernetes.default.svc:443"

2.3 Create a Vault Role for OpenShift Applications

vault write auth/kubernetes/role/my-app \
    bound_service_account_names=vault-sa \
    bound_service_account_namespaces=default \
    policies=my-policy \
    ttl=24h

This binds the role to a ServiceAccount in OpenShift.


---

Step 3: Install Vault CSI Driver in OpenShift

3.1 Install Vault CSI Driver

oc apply -f https://github.com/hashicorp/vault-csi-provider/releases/latest/download/deployment.yaml

Verify the CSI driver is running:

oc get pods -n kube-system | grep vault


---

Step 4: Create a Vault Policy

Create a policy that grants access to secrets:

vault policy write my-policy - <<EOF
path "secret/data/myapp" {
  capabilities = ["read"]
}
EOF


---

Step 5: Storing a Secret in Vault

vault kv put secret/myapp username="admin" password="supersecret"


---

Step 6: Create a Kubernetes SecretProviderClass

This defines how secrets are fetched from Vault.

apiVersion: secrets-store.csi.x-k8s.io/v1alpha1
kind: SecretProviderClass
metadata:
  name: vault-secrets
  namespace: default
spec:
  provider: vault
  parameters:
    roleName: "my-app"
    vaultAddress: "http://vault.vault.svc:8200"
    objects: |
      - objectName: "my-secret"
        secretPath: "secret/data/myapp"
        secretKey: "password"

Apply it:

oc apply -f vault-secretprovider.yaml


---

Step 7: Mount Vault Secrets in an OpenShift Pod

Now, create a pod that mounts secrets using the CSI driver.

apiVersion: v1
kind: Pod
metadata:
  name: vault-test
  namespace: default
spec:
  serviceAccountName: vault-sa
  containers:
    - name: myapp
      image: busybox
      command: [ "sleep", "3600" ]
      volumeMounts:
        - name: vault-secrets
          mountPath: "/mnt/secrets-store"
          readOnly: true
  volumes:
    - name: vault-secrets
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "vault-secrets"

Apply it:

oc apply -f vault-pod.yaml

Verify secrets are injected:

oc exec -it vault-test -- cat /mnt/secrets-store/my-secret


---

Next Steps

Implement auto-secret rotation.

Integrate with database engines for dynamic secrets.

Use Vault Agent for advanced secret management.


Would you like additional details on any step?





